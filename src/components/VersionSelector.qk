<lang-ts>
    import { store, worker } from "../util/state"
    import { refreshCompiledCode } from "../monaco/init"
    import { qingkuaiVersionsPms, tsVersionsPms } from "../util/constants"

    interface Props {
        package: "typescript" | "qingkuai"
    }

    let isLoading = false
    let showVersionList = false
    let mainDom!: HTMLDivElement
    let candidateVersions: string[] = []
    const formatedPkgName = props.package[0].toUpperCase() + props.package.slice(1)
    const currentVersion = der(store[props.package === "qingkuai" ? "qingkuaiVersion" : "tsVersion"])

    function handleSelectVersion(version: string) {
        if (props.package === "typescript") {
            store.tsVersion = version
        } else {
            store.qingkuaiVersion = version
        }
        store.resolving = true
        showVersionList = false
        worker.loadCore(store.tsVersion, store.qingkuaiVersion).then(() => {
            store.resolving = false
            refreshCompiledCode(true)
        })
    }

    async function loadVersions() {
        const mask = document.querySelector("body .mask")
        mask && (mask as any).click()
        isLoading = true

        if (props.package !== "qingkuai") {
            candidateVersions = await tsVersionsPms
        } else {
            candidateVersions = await qingkuaiVersionsPms
        }
        showVersionList = !(isLoading = false)
    }
</lang-ts>

<div
    class="version-selector"
    &dom={mainDom}
    @click={loadVersions}
>
    <span>{formatedPkgName} {currentVersion}</span>
    <i
        class="iconfont"
        !class={`icon-${isLoading ? "loading" : "arrow"}`}
    ></i>
    <ul
        class="selection-box"
        #show={showVersionList}
    >
        <li
            #for={item of candidateVersions}
            @click|stop={handleSelectVersion(item)}
        >
            {item}
        </li>
        <div
            class="mask"
            #if={showVersionList}
            #target={document.body}
            @click={showVersionList = false}
        ></div>
    </ul>
</div>

<lang-scss>
    .version-selector {
        display: inline-block;
        position: relative;
        user-select: none;
        cursor: pointer;
        z-index: 11;
        font-size: 13px;
        font-weight: 500;
        margin-left: 15px;
        letter-spacing: 0.3px;
        height: var(--top-bar-height);
        color: var(--top-bar-font-color);
        line-height: var(--top-bar-height);

        .iconfont {
            font-size: 14px;
            margin-left: 5px;

            &.icon-loading {
                display: inline-block;
                animation: loading 1200ms ease infinite;
            }
        }

        .selection-box {
            max-height: calc(100vh - 75px);
            z-index: 11;
            width: 100%;
            overflow: hidden;
            overflow-y: visible;
            position: absolute;
            border-radius: 3px;
            background-color: #333;
            top: var(--top-bar-height);

            li {
                cursor: pointer;
                list-style: none;
                font-size: 13px;
                height: 20px;
                line-height: 20px;
                padding: 6px 10px;

                &:hover {
                    background-color: #444;
                    color: var(--top-bar-active-font-color);
                }
            }

            &.active {
                box-shadow: 0 0 3px #555;
            }
        }
    }
</lang-scss>
